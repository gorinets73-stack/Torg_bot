import time
import math
import itertools
import random
import pandas as pd
from pybit.unified_trading import HTTP
from config import config

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
TESTNET = True                          # –¥–µ–º–æ-—Å—á—ë—Ç Bybit
SYMBOLS = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å
INTERVAL = "5"                          # 5m —Å–≤–µ—á–∏
LEVERAGE = 10                           # –ø–ª–µ—á–æ
TRADE_SHARE = 0.10                      # 10% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
STOP_LOSS_PCT = 0.10                    # SL 10% –æ—Ç –≤—Ö–æ–¥–∞
TRAIL_STEP_PCT = 0.05                   # —Å—Ç—É–ø–µ–Ω–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞: –∫–∞–∂–¥—ã–µ +5% (–ª–æ–Ω–≥) / -5% (—à–æ—Ä—Ç)
TRAIL_BUFFER = 0.02                     # –æ—Ç—Å—Ç—É–ø –¥–ª—è SL –æ—Ç —Å—Ç—É–ø–µ–Ω–∏ (2%)
SR_LOOKBACK = 60                        # –æ–∫–Ω–æ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–ø–æ —Å–≤–µ—á–∞–º)
LOOP_DELAY = 60                         # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ö–æ–¥–∞–º–∏ (—Å–µ–∫)
PAUSE_BETWEEN_SYMBOLS = 2               # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–Ω–µ—Ç–∞–º–∏ (—Å–µ–∫)

# =========================
# –ö–õ–Æ–ß–ò BYBIT (–±–µ—Ä—ë–º –∏–∑ config.py)
# =========================
API_KEY = config["API_KEY"]
API_SECRET = config["API_SECRET"]

# =========================
# –ü–†–û–ö–°–ò (–∞–≤—Ç–æ—Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–∏ –ª—é–±–æ–π —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ)
# =========================
PROXIES = [
    "http://103.172.70.121:8080",
    "http://47.243.177.210:8080",
    "http://185.105.237.92:8080",
    "http://51.159.66.158:3128",
    "http://8.219.97.248:80",
]
_proxy_cycle = itertools.cycle(PROXIES)

def _make_session(proxy: str) -> HTTP:
    return HTTP(
        testnet=TESTNET,
        api_key=API_KEY,
        api_secret=API_SECRET,
        timeout=15,  # –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–µ request_timeout)
        proxies={"http": proxy, "https": proxy}
    )

def _get_session() -> HTTP:
    """–ü–æ–¥–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Å—Å–∏—é (—Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ ‚Äî –±–∞–ª–∞–Ω—Å)."""
    while True:
        proxy = next(_proxy_cycle)
        try:
            s = _make_session(proxy)
            ping = s.get_wallet_balance(accountType="UNIFIED")
            if "result" in ping:
                print(f"‚úÖ –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {proxy}")
                return s
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∫—Å–∏ {proxy} –Ω–µ –ø–æ–¥–æ—à—ë–ª: {e}")
            time.sleep(2)

# –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è
session = _get_session()

def safe_call(func, *args, **kwargs):
    """–í—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ API; –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –º–µ–Ω—è–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–æ–±—É–µ—Ç —Å–Ω–æ–≤–∞."""
    global session
    while True:
        try:
            return func(*args, **kwargs)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e} ‚Üí —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏")
            session = _get_session()
            time.sleep(2)

# =========================
# –ò–ù–î–ò–ö–ê–¢–û–†–´
# =========================
def ema(series: pd.Series, period: int) -> pd.Series:
    return series.ewm(span=period, adjust=False).mean()

def rsi(series: pd.Series, period: int = 14) -> pd.Series:
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(period).mean()
    avg_loss = loss.rolling(period).mean()
    rs = avg_gain / avg_loss.replace(0, pd.NA)
    out = 100 - (100 / (1 + rs))
    return out.bfill().fillna(50)

# =========================
# –ú–ê–†–ö–ï–¢ –î–ê–ù–ù–´–ï
# =========================
def get_klines(symbol: str, interval=INTERVAL, limit=max(200, SR_LOOKBACK + 20)) -> pd.DataFrame:
    """–¢—è–Ω–µ–º 5m —Å–≤–µ—á–∏ –ª–∏–Ω–µ–π–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ (USDT-Perp)."""
    k = safe_call(session.get_kline, category="linear", symbol=symbol, interval=interval, limit=limit)
    rows = k["result"]["list"]  # —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤: [ts, open, high, low, close, volume, turnover]
    df = pd.DataFrame(rows, columns=["ts", "open", "high", "low", "close", "volume", "turnover"])
    for c in ["open", "high", "low", "close", "volume"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")
    df = df.iloc[::-1].reset_index(drop=True)  # –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é
    return df

def get_balance() -> float:
    """Total Equity –∞–∫–∫–∞—É–Ω—Ç–∞ (UNIFIED)."""
    b = safe_call(session.get_wallet_balance, accountType="UNIFIED")
    return float(b["result"]["list"][0]["totalEquity"])

def get_instrument_filters(symbol: str):
    """–†–∞–∑–º–µ—Ä —à–∞–≥–∞/–º–∏–Ω–∏–º–∞–ª–∫–∏ –ª–æ—Ç–∞ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    info = safe_call(session.get_instruments_info, category="linear", symbol=symbol)
    item = info["result"]["list"][0]
    lot = item["lotSizeFilter"]
    min_qty = float(lot["minOrderQty"])
    qty_step = float(lot["qtyStep"])
    return min_qty, qty_step

def round_qty(qty: float, step: float, min_qty: float) -> float:
    rounded = round(qty / step) * step
    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—á–µ–Ω—å –º–µ–ª–∫–∏—Ö —à–∞–≥–∞—Ö
    rounded = float(f"{rounded:.10f}")
    return max(min_qty, rounded)

def calc_sr(df: pd.DataFrame, lookback=SR_LOOKBACK):
    """–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø–æ –º–∏–Ω–∏–º—É–º—É/–º–∞–∫—Å–∏–º—É–º—É –æ–∫–Ω–∞."""
    recent = df.tail(lookback)
    support = float(recent["low"].min())
    resistance = float(recent["high"].max())
    return support, resistance

# =========================
# –ü–û–ó–ò–¶–ò–ò / –û–†–î–ï–†–ê
# =========================
def set_leverage(symbol: str, lev=LEVERAGE):
    safe_call(session.set_leverage, category="linear", symbol=symbol, buyLeverage=str(lev), sellLeverage=str(lev))

def get_position(symbol: str):
    data = safe_call(session.get_positions, category="linear", symbol=symbol)
    arr = data["result"]["list"]
    if not arr:
        return None
    pos = arr[0]
    if float(pos.get("size", 0)) > 0:
        return pos
    return None

def place_market(symbol: str, side: str, qty: float, sl: float, tp: float):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ Market —Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º TP/SL."""
    return safe_call(
        session.place_order,
        category="linear",
        symbol=symbol,
        side=side,                 # "Buy" / "Sell"
        orderType="Market",
        qty=str(qty),
        timeInForce="GoodTillCancel",
        reduceOnly=False,
        takeProfit=str(tp),
        stopLoss=str(sl),
        tpTriggerBy="LastPrice",
        slTriggerBy="LastPrice",
        positionIdx=0
    )

def update_trading_stop(symbol: str, stop_loss: float | None, take_profit: float | None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø–∞/—Ç–µ–π–∫–∞ —É –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏."""
    return safe_call(
        session.set_trading_stop,
        category="linear",
        symbol=symbol,
        stopLoss=str(stop_loss) if stop_loss else None,
        takeProfit=str(take_profit) if take_profit else None,
        tpTriggerBy="LastPrice",
        slTriggerBy="LastPrice",
        positionIdx=0
    )

# =========================
# –°–ò–ì–ù–ê–õ–´ / –õ–û–ì–ò–ö–ê
# =========================
def signal(df: pd.DataFrame):
    """'Buy' / 'Sell' / None –ø–æ EMA20/EMA50 + —Ñ–∏–ª—å—Ç—Ä RSI."""
    df["EMA20"] = ema(df["close"], 20)
    df["EMA50"] = ema(df["close"], 50)
    df["RSI"] = rsi(df["close"], 14)

    last = df.iloc[-1]
    if pd.isna(last["EMA20"]) or pd.isna(last["EMA50"]):
        return None

    # LONG: EMA20 > EMA50 –∏ RSI < 70 (–±–µ–∑ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏)
    if last["EMA20"] > last["EMA50"] and last["RSI"] < 70:
        return "Buy"

    # SHORT: EMA20 < EMA50 –∏ RSI > 30 (–±–µ–∑ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏)
    if last["EMA20"] < last["EMA50"] and last["RSI"] > 30:
        return "Sell"

    return None

def try_open(symbol: str, balance: float, df: pd.DataFrame, support: float, resistance: float):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: 10% –¥–µ–ø–æ–∑–∏—Ç–∞ * 10x, SL 10%, TP –ø–æ S/R (–∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä ¬±15%)."""
    price = float(df["close"].iloc[-1])
    min_qty, step = get_instrument_filters(symbol)

    exposure = balance * TRADE_SHARE * LEVERAGE          # USDT –ø–æ–¥ –ø–æ–∑–∏—Ü–∏—é —Å —É—á—ë—Ç–æ–º –ø–ª–µ—á–∞
    qty = round_qty(exposure / price, step, min_qty)
    if qty <= 0:
        return

    sig = signal(df)
    if not sig:
        return

    set_leverage(symbol, LEVERAGE)

    if sig == "Buy":
        sl = price * (1 - STOP_LOSS_PCT)
        tp = min(resistance, price * (1 + 3 * TRAIL_STEP_PCT))  # –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä (–¥–æ +15%)
        res = place_market(symbol, "Buy", qty, sl, tp)
        print(f"üöÄ {symbol} LONG qty={qty} @~{price:.4f} SL={sl:.4f} TP={tp:.4f} ‚Üí {res.get('retMsg')}")
    else:
        sl = price * (1 + STOP_LOSS_PCT)
        tp = max(support, price * (1 - 3 * TRAIL_STEP_PCT))
        res = place_market(symbol, "Sell", qty, sl, tp)
        print(f"üîª {symbol} SHORT qty={qty} @~{price:.4f} SL={sl:.4f} TP={tp:.4f} ‚Üí {res.get('retMsg')}")

def manage_trailing(symbol: str, last_price: float, support: float, resistance: float):
    """–°—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥ –∏ TP –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ."""
    pos = get_position(symbol)
    if not pos:
        return

    side = pos["side"]             # "Buy" / "Sell"
    entry = float(pos["avgPrice"])

    # —Ç–µ–∫—É—â–∏–µ SL/TP (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏)
    try:
        if side == "Buy":
            current_sl = float(pos.get("stopLoss") or 0.0)
        else:
            current_sl = float(pos.get("stopLoss") or 1e18)
    except:
        current_sl = 0.0 if side == "Buy" else 1e18

    if side == "Buy":
        gain = (last_price / entry) - 1.0
        steps = math.floor(gain / TRAIL_STEP_PCT) if gain > 0 else 0
        # –Ω–æ–≤—ã–π SL –∫ —Å—Ç—É–ø–µ–Ω–∏ (—Å –æ—Ç—Å—Ç—É–ø–æ–º BUFFER) –∏–ª–∏ –±–∞–∑–æ–≤—ã–π SL -10%
        new_sl = entry * (1 + steps * TRAIL_STEP_PCT - TRAIL_BUFFER) if steps > 0 else entry * (1 - STOP_LOSS_PCT)
        target = resistance
        if new_sl > current_sl:  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–≤–µ—Ä—Ö
            update_trading_stop(symbol, stop_loss=new_sl, take_profit=target)
            print(f"üìà {symbol} LONG: –ø–æ–¥—Ç—è–Ω—É–ª SL ‚Üí {new_sl:.4f}, TP ‚Üí {target:.4f}")

    else:  # Sell
        drop = 1.0 - (last_price / entry)
        steps = math.floor(drop / TRAIL_STEP_PCT) if drop > 0 else 0
        new_sl = entry * (1 - steps * TRAIL_STEP_PCT + TRAIL_BUFFER) if steps > 0 else entry * (1 + STOP_LOSS_PCT)
        target = support
        if new_sl < current_sl:  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω–∏–∑
            update_trading_stop(symbol, stop_loss=new_sl, take_profit=target)
            print(f"üìâ {symbol} SHORT: –ø–æ–¥—Ç—è–Ω—É–ª SL ‚Üí {new_sl:.4f}, TP ‚Üí {target:.4f}")

# =========================
# –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ
# =========================
def run_symbol(symbol: str):
    df = get_klines(symbol, INTERVAL)
    support, resistance = calc_sr(df, SR_LOOKBACK)
    last_price = float(df["close"].iloc[-1])

    pos = get_position(symbol)
    if pos:
        # –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è ‚Äî –º–µ–Ω–µ–¥–∂–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º TP –∫ —É—Ä–æ–≤–Ω—é
        manage_trailing(symbol, last_price, support, resistance)
    else:
        # –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª—É
        balance = get_balance()
        try_open(symbol, balance, df, support, resistance)

def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (Bybit Testnet): 5m, EMA+RSI+S/R, 10% –¥–µ–ø–æ, x10, SL 10%, —Ç—Ä–µ–π–ª–∏–Ω–≥ +5%")
    while True:
        for sym in SYMBOLS:
            try:
                run_symbol(sym)
            except Exception as e:
                print(f"‚ùó –û—à–∏–±–∫–∞ –Ω–∞ {sym}: {e}")
            time.sleep(PAUSE_BETWEEN_SYMBOLS)
        time.sleep(LOOP_DELAY)

if __name__ == "__main__":
    main()
