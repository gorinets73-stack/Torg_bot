import os
import time
import logging
import requests
import pandas as pd
import ccxt
from ta.momentum import RSIIndicator
from ta.trend import SMAIndicator
from flask import Flask, request
from threading import Thread

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TEST_MODE = True  # ‚ö†Ô∏è –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç, —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç
SYMBOLS = ["BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT",
           "XRP/USDT", "ADA/USDT", "DOGE/USDT", "TRX/USDT",
           "DOT/USDT", "MATIC/USDT", "AVAX/USDT", "LINK/USDT",
           "LTC/USDT", "BCH/USDT"]

INVEST_AMOUNT = 10
LEVERAGE = 10

BOT_TOKEN = "8432592746:AAEg3uaH-Xa6tf-pqZI_RjiKaRZAQfsHbXM"
CHAT_ID = "1623720732"
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === Flask –¥–ª—è webhook ===
app = Flask(__name__)

# === –ë–∏—Ä–∂–∞ —á–µ—Ä–µ–∑ CCXT (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö) ===
exchange = ccxt.bitget({
    "enableRateLimit": True,
})
exchange.load_markets()

# === –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ ===
def get_symbol(symbol: str):
    if symbol in exchange.symbols:
        return symbol
    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
    candidates = [s for s in exchange.symbols if symbol.replace("/", "") in s.replace("/", "")]
    if candidates:
        logging.warning(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –±–ª–∏–∂–∞–π—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: {candidates[0]}")
        return candidates[0]
    raise ValueError(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Bitget. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—ã–Ω–∫–∏: {len(exchange.symbols)}")

# === Telegram ===
def send_message(chat_id, text):
    url = f"{API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# === –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (RSI + —Ç—Ä–µ–Ω–¥) ===
def analyze_symbol(symbol):
    try:
        market_symbol = get_symbol(symbol)  # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ–¥ Bitget
        ohlcv = exchange.fetch_ohlcv(market_symbol, timeframe="5m", limit=100)
        df = pd.DataFrame(ohlcv, columns=["time", "open", "high", "low", "close", "volume"])
        df["rsi"] = RSIIndicator(df["close"], window=14).rsi()
        df["sma50"] = SMAIndicator(df["close"], window=50).sma_indicator()

        rsi = df["rsi"].iloc[-1]
        price = df["close"].iloc[-1]
        sma50 = df["sma50"].iloc[-1]

        # –£—Å–ª–æ–≤–∏—è
        if rsi < 30 and price > sma50:
            return f"üü¢ LONG {market_symbol} {INVEST_AMOUNT}$ (RSI={round(rsi,2)}, —Ü–µ–Ω–∞ –≤—ã—à–µ —Ç—Ä–µ–Ω–¥–∞)"
        elif rsi > 70 and price < sma50:
            return f"üî¥ SHORT {market_symbol} {INVEST_AMOUNT}$ (RSI={round(rsi,2)}, —Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ç—Ä–µ–Ω–¥–∞)"
        else:
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

# === –¶–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ ===
def trading_loop():
    send_message(CHAT_ID, "ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω! (—Ä–µ–∂–∏–º paper-trading)")
    while True:
        for symbol in SYMBOLS:
            signal = analyze_symbol(symbol)
            if signal:
                send_message(CHAT_ID, signal)
        time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

# === Telegram –∫–æ–º–∞–Ω–¥—ã ===
def handle_command(command):
    if command == "/start":
        return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¢–ï–°–¢–û–í–û–ú —Ä–µ–∂–∏–º–µ!\n–ö–æ–º–∞–Ω–¥—ã:\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/positions - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏"
    elif command == "/help":
        return "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –∑–∞–ø—É—Å–∫\n/help - –ø–æ–º–æ—â—å\n/positions - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏"
    elif command == "/positions":
        return "üìù –ü–æ–∫–∞ —Å–¥–µ–ª–∫–∏ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ, –±–æ—Ç —Ç–æ—Ä–≥—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ."
    else:
        return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help."

@app.route("/", methods=["POST", "GET"])
def webhook():
    if request.method == "POST":
        update = request.json
        if "message" in update and "text" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            text = update["message"]["text"].strip()
            reply = handle_command(text)
            send_message(chat_id, reply)
        return {"ok": True}
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    Thread(target=trading_loop, daemon=True).start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
