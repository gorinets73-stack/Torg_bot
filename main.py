import time
import math
import requests
import pandas as pd
import numpy as np
from pybit.unified_trading import HTTP

# ========= –ù–ê–°–¢–†–û–ô–ö–ò / –ö–õ–Æ–ß–ò =========
BYBIT_API_KEY = "iiX4VE3pKkwIzN7MW7"
BYBIT_API_SECRET = "7eauCqefE7EPSr5p8esMAyWEJczL5i9uhsLL"
TESTNET = True  # DEMO-—Å—á—ë—Ç

TELEGRAM_BOT_TOKEN = "8432592746:AAEg3uaH-Xa6tf-pqZI_RjiKaRZAQfsHbXM"
TELEGRAM_CHAT_ID = "1623720732"

SYMBOLS = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]   # –∫–∞–∫–∏–µ —Ñ—å—é—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–º
INTERVAL = "5"                                 # 5m
LIMIT = 300                                    # —Å–≤–µ—á–µ–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤/—É—Ä–æ–≤–Ω–µ–π
EMA_PERIOD = 200
RSI_PERIOD = 14
LEVEL_WINDOW = 20
NEAR_LEVEL_PCT = 0.02                          # –±–ª–∏–∑–æ—Å—Ç—å –∫ —É—Ä–æ–≤–Ω—é ¬±2%
RISK_SHARE = 0.10                               # 10% –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ –≤—Ö–æ–¥
LEVERAGE = 10
STOP_LOSS_PCT = 0.10                            # -10% –æ—Ç –≤—Ö–æ–¥–∞
TRAIL_STEP = 0.05                               # —à–∞–≥ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ 5%

CHECK_INTERVAL_SEC = 30                         # —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –ø–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
state = {}  # { symbol: {"entry": float, "side": "Buy"/"Sell", "step": int} }

# ========= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =========
def tg(text: str):
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            data={"chat_id": TELEGRAM_CHAT_ID, "text": text},
            timeout=10
        )
    except Exception as e:
        print("TG error:", e)

session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET, testnet=TESTNET)

def get_wallet_usdt():
    res = session.get_wallet_balance(accountType="UNIFIED")
    coins = res["result"]["list"][0]["coin"]
    usdt = next((c for c in coins if c["coin"] == "USDT"), None)
    return float(usdt["walletBalance"]) if usdt else 0.0

def get_last_price(symbol: str) -> float:
    t = session.get_tickers(category="linear", symbol=symbol)
    return float(t["result"]["list"][0]["lastPrice"])

def get_klines(symbol: str, interval=INTERVAL, limit=LIMIT) -> pd.DataFrame:
    data = session.get_kline(category="linear", symbol=symbol, interval=interval, limit=limit)
    cols = ["start","open","high","low","close","volume","turnover"]
    df = pd.DataFrame(data["result"]["list"], columns=cols)
    for c in ["open","high","low","close","volume","turnover"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")
    df = df.iloc[::-1].reset_index(drop=True)
    return df

def ema(series: pd.Series, period=EMA_PERIOD):
    return series.ewm(span=period, adjust=False).mean()

def rsi(series: pd.Series, period=RSI_PERIOD):
    delta = series.diff()
    gain = delta.clip(lower=0).rolling(period).mean()
    loss = (-delta.clip(upper=0)).rolling(period).mean()
    rs = gain / loss.replace(0, np.nan)
    out = 100 - (100 / (1 + rs))
    return out.bfill().fillna(50)

def support_resistance(df: pd.DataFrame, window=LEVEL_WINDOW):
    sup = df["low"].rolling(window).min()
    res = df["high"].rolling(window).max()
    return sup.iloc[-1], res.iloc[-1]

def set_leverage(symbol: str, leverage=LEVERAGE):
    try:
        session.set_leverage(category="linear", symbol=symbol,
                             buyLeverage=str(leverage), sellLeverage=str(leverage))
    except Exception as e:
        tg(f"‚ö†Ô∏è set_leverage {symbol}: {e}")

def qty_from_usdt(usdt: float, price: float, step=0.001):
    if price <= 0:
        return 0.0
    raw = usdt / price
    return max(step, round(raw / step) * step)

def close_position_market(symbol: str, side: str, qty: float):
    # side ‚Äî —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏; –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    exit_side = "Sell" if side == "Buy" else "Buy"
    try:
        session.place_order(category="linear", symbol=symbol,
                            side=exit_side, orderType="Market", qty=str(qty))
        tg(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ {symbol} {exit_side} {qty}")
    except Exception as e:
        tg(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {e}")

def position_info(symbol: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (side, size, avgPrice) –∏–ª–∏ (None, 0, 0.0) –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        res = session.get_positions(category="linear", symbol=symbol)
        lst = res["result"]["list"]
        if not lst:
            return None, 0.0, 0.0
        p = lst[0]
        side = "Buy" if float(p["size"]) > 0 and p["side"] == "Buy" else ("Sell" if float(p["size"]) > 0 and p["side"] == "Sell" else None)
        size = float(p["size"])
        entry = float(p["avgPrice"]) if p["avgPrice"] not in (None, "", "0") else 0.0
        return side, size, entry
    except Exception as e:
        tg(f"‚ö†Ô∏è position_info {symbol}: {e}")
        return None, 0.0, 0.0

def update_trailing(symbol: str, last_price: float):
    """–°—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥ –ø–æ 5%: –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ >= entry*(1+0.05*n), —Å—Ç–æ–ø = entry*(1+0.05*(n-1))"""
    if symbol not in state:
        return
    entry = state[symbol]["entry"]
    side = state[symbol]["side"]
    step = state[symbol]["step"]  # —Å–∫–æ–ª—å–∫–æ ¬´—Å—Ç—É–ø–µ–Ω–µ–π¬ª —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ

    if entry <= 0:
        return

    # —Ç–µ–∫—É—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç –≤—Ö–æ–¥–∞
    change = (last_price / entry - 1.0) if side == "Buy" else (entry / last_price - 1.0)

    # –°–∫–æ–ª—å–∫–æ 5%-—Å—Ç—É–ø–µ–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ —Å–µ–π—á–∞—Å
    current_steps = int(math.floor(change / TRAIL_STEP))
    if current_steps <= step:
        return  # –µ—â—ë –Ω–µ –¥–æ—à–ª–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—É–ø–µ–Ω–∏

    # –ù—É–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–æ–ø
    new_step = current_steps
    # –ù–æ–≤—ã–π —Å—Ç–æ–ø —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—É–ø–µ–Ω–∏ (–Ω–∞ –æ–¥–Ω—É –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π)
    protect_gain = max(0, (new_step - 1) * TRAIL_STEP)  # 0.00, 0.05, 0.10, ...
    if side == "Buy":
        new_sl = entry * (1 - STOP_LOSS_PCT)  # –±–∞–∑–æ–≤—ã–π
        # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö
        new_sl = max(new_sl, entry * (1 + protect_gain))
    else:
        new_sl = entry * (1 + STOP_LOSS_PCT)
        new_sl = min(new_sl, entry * (1 - protect_gain))

    try:
        if side == "Buy":
            session.set_trading_stop(category="linear", symbol=symbol,
                                     stopLoss=str(round(new_sl, 4)), slTriggerBy="LastPrice")
        else:
            session.set_trading_stop(category="linear", symbol=symbol,
                                     stopLoss=str(round(new_sl, 4)), slTriggerBy="LastPrice")
        state[symbol]["step"] = new_step
        tg(f"üîÑ –¢—Ä–µ–π–ª–∏–Ω–≥ {symbol}: —à–∞–≥ {new_step}, –Ω–æ–≤—ã–π SL = {round(new_sl, 4)}")
    except Exception as e:
        tg(f"‚ö†Ô∏è set_trading_stop {symbol}: {e}")

def try_enter(symbol: str):
    # –£–∂–µ –≤ –ø–æ–∑–∏—Ü–∏–∏?
    cur_side, cur_size, _ = position_info(symbol)
    if cur_size > 0:
        return  # —É–∂–µ –≤ —Å–¥–µ–ª–∫–µ ‚Äî —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

    df = get_klines(symbol)
    df["EMA200"] = ema(df["close"], EMA_PERIOD)
    df["RSI"] = rsi(df["close"], RSI_PERIOD)
    support, resistance = support_resistance(df, LEVEL_WINDOW)
    price = df["close"].iloc[-1]

    near_support = abs(price - support) / price <= NEAR_LEVEL_PCT
    near_resist = abs(price - resistance) / price <= NEAR_LEVEL_PCT

    # –°–∏–≥–Ω–∞–ª—ã
    long_signal = (df["RSI"].iloc[-1] < 30) and (price > df["EMA200"].iloc[-1]) and near_support
    short_signal = (df["RSI"].iloc[-1] > 70) and (price < df["EMA200"].iloc[-1]) and near_resist

    if not (long_signal or short_signal):
        return

    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ ‚âà 10% –¥–µ–ø–æ–∑–∏—Ç–∞ (–≤ USDT), –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    balance = get_wallet_usdt()
    exposure_usdt = balance * RISK_SHARE
    qty = qty_from_usdt(exposure_usdt, price)

    if qty <= 0:
        return

    set_leverage(symbol, LEVERAGE)
    side = "Buy" if long_signal else "Sell"

    try:
        order = session.place_order(category="linear", symbol=symbol,
                                    side=side, orderType="Market", qty=str(qty))
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é/–≤—Ö–æ–¥
        _, size, entry = position_info(symbol)
        if size <= 0 or entry <= 0:
            tg(f"‚ö†Ô∏è –ù–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ {symbol}")
            return

        # –ë–∞–∑–æ–≤—ã–π SL -10%
        if side == "Buy":
            sl = round(entry * (1 - STOP_LOSS_PCT), 4)
            tp = round(min(resistance, entry * (1 + TRAIL_STEP)), 4)  # –ø–µ—Ä–≤–∏—á–Ω—ã–π TP: —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ +5%
        else:
            sl = round(entry * (1 + STOP_LOSS_PCT), 4)
            tp = round(max(support, entry * (1 - TRAIL_STEP)), 4)

        session.set_trading_stop(category="linear", symbol=symbol,
                                 stopLoss=str(sl), takeProfit=str(tp),
                                 slTriggerBy="LastPrice", tpTriggerBy="LastPrice")

        state[symbol] = {"entry": entry, "side": side, "step": 0}
        tg(f"‚úÖ –í—Ö–æ–¥ {symbol} {side} @ {entry}\nSL: {sl}\nTP: {tp}\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT, QTY: {qty}")
    except Exception as e:
        tg(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ {symbol}: {e}")

def manage_position(symbol: str):
    side, size, entry = position_info(symbol)
    if size <= 0:
        if symbol in state:
            del state[symbol]
        return

    price = get_last_price(symbol)

    # –°—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥
    update_trailing(symbol, price)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ
    df = get_klines(symbol, limit=LEVEL_WINDOW + 5)
    support, resistance = support_resistance(df, LEVEL_WINDOW)

    # –¥–æ–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è 0.1%
    tol = 0.001

    if side == "Buy" and price >= resistance * (1 - tol):
        close_position_market(symbol, side, size)
        tg(f"üéØ TP –ø–æ —É—Ä–æ–≤–Ω—é {symbol}: —Ü–µ–Ω–∞ {price} ‚âà resistance {resistance}")
        if symbol in state: del state[symbol]
        return

    if side == "Sell" and price <= support * (1 + tol):
        close_position_market(symbol, side, size)
        tg(f"üéØ TP –ø–æ —É—Ä–æ–≤–Ω—é {symbol}: —Ü–µ–Ω–∞ {price} ‚âà support {support}")
        if symbol in state: del state[symbol]
        return

def main_loop():
    tg("ü§ñ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ Bybit DEMO: RSI+EMA200+–£—Ä–æ–≤–Ω–∏, 5m, –≤—Ö–æ–¥ 10% –¥–µ–ø–æ, SL -10%, —Ç—Ä–µ–π–ª–∏–Ω–≥ +5% —à–∞–≥–∞–º–∏.")
    while True:
        try:
            for sym in SYMBOLS:
                try_enter(sym)      # –≤—Ö–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª
                manage_position(sym)  # —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
            time.sleep(CHECK_INTERVAL_SEC)
        except Exception as e:
            tg(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            time.sleep(10)

if __name__ == "__main__":
    main_loop()
