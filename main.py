import os
import time
import logging
import json
import requests
import pandas as pd
import ccxt
from ta.momentum import RSIIndicator
from ta.trend import SMAIndicator
from flask import Flask, request
from threading import Thread

# === Flask ===
app = Flask(__name__)

# === Telegram ===
BOT_TOKEN = "8432592746:AAEg3uaH-Xa6tf-pqZI_RjiKaRZAQfsHbXM"
CHAT_ID = "1623720732"
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

# === –ë–∏—Ä–∂–∞ ===
exchange = ccxt.bitget({"enableRateLimit": True})
exchange.load_markets()

# === –§–∞–π–ª—ã ===
OPEN_TRADES_FILE = "open_trades.json"
CLOSED_TRADES_FILE = "closed_trades.json"
SETTINGS_FILE = "settings.json"

# === –°–∏–º–≤–æ–ª—ã ===
SYMBOLS = ["BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT",
           "XRP/USDT", "ADA/USDT", "DOGE/USDT", "TRX/USDT",
           "DOT/USDT", "POL/USDT", "AVAX/USDT", "LINK/USDT",
           "LTC/USDT", "BCH/USDT"]

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
SL_PCT = 0.02   # —Å—Ç–æ–ø 2%
TP_PCT = 0.04   # —Ç–µ–π–∫ 4%
LEVERAGE = 10

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
ALL_TIMEFRAMES = ["1m", "5m", "15m", "30m", "1h"]
ACTIVE_TF = ["1m", "5m", "15m"]
INVEST_AMOUNT = 20
TRADE_MODE = "virtual"  # –∏–ª–∏ "real"

# === –ü–∞–º—è—Ç—å ===
open_trades = []
closed_trades = []

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
def save_settings():
    try:
        data = {
            "ACTIVE_TF": ACTIVE_TF,
            "INVEST_AMOUNT": INVEST_AMOUNT,
            "TRADE_MODE": TRADE_MODE
        }
        with open(SETTINGS_FILE, "w") as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def load_settings():
    global ACTIVE_TF, INVEST_AMOUNT, TRADE_MODE
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, "r") as f:
                data = json.load(f)
                ACTIVE_TF[:] = data.get("ACTIVE_TF", ACTIVE_TF)
                INVEST_AMOUNT = data.get("INVEST_AMOUNT", INVEST_AMOUNT)
                TRADE_MODE = data.get("TRADE_MODE", TRADE_MODE)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

load_settings()

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ —Å–¥–µ–ª–æ–∫ ===
def save_state():
    try:
        with open(OPEN_TRADES_FILE, "w") as f:
            json.dump(open_trades, f, indent=2)
        with open(CLOSED_TRADES_FILE, "w") as f:
            json.dump(closed_trades, f, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def load_state():
    global open_trades, closed_trades
    try:
        if os.path.exists(OPEN_TRADES_FILE):
            with open(OPEN_TRADES_FILE, "r") as f:
                open_trades = json.load(f)
        if os.path.exists(CLOSED_TRADES_FILE):
            with open(CLOSED_TRADES_FILE, "r") as f:
                closed_trades = json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

load_state()

# === –£—Ç–∏–ª–∏—Ç—ã ===
def send_message(chat_id, text):
    url = f"{API_URL}/sendMessage"
    try:
        requests.post(url, json={"chat_id": chat_id, "text": text}, timeout=10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def fetch_ohlcv(symbol, timeframe="1h", limit=300):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=["time", "open", "high", "low", "close", "volume"])
    return df

def compute_indicators(df):
    df = df.copy()
    df["rsi"] = RSIIndicator(df["close"], window=14).rsi()
    df["sma50"] = SMAIndicator(df["close"], window=50).sma_indicator()
    df["sma200"] = SMAIndicator(df["close"], window=200).sma_indicator()
    return df

def levels_from_df(df, lookback=50):
    return df["low"].tail(lookback).min(), df["high"].tail(lookback).max()

def pnl_percent(entry_price, current_price, direction):
    return (current_price - entry_price) / entry_price if direction == "LONG" else (entry_price - current_price) / entry_price

def cash_pnl(invest_amount, leverage, pnl_percent):
    return invest_amount * leverage * pnl_percent

def mode_status():
    return "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π" if TRADE_MODE == "virtual" else "–†–µ–∞–ª—å–Ω—ã–π"

# === –§–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ ===
def format_signal_text(symbol, df):
    price = df["close"].iloc[-1]
    rsi = df["rsi"].iloc[-1]
    sma50 = df["sma50"].iloc[-1]
    sma200 = df["sma200"].iloc[-1]
    support, resistance = levels_from_df(df)

    trend = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" if price > sma200 else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π"
    if rsi < 30:
        rsi_status = "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (LONG-—Å–∏–≥–Ω–∞–ª –≤–æ–∑–º–æ–∂–µ–Ω)"
    elif rsi > 70:
        rsi_status = "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω (SHORT-—Å–∏–≥–Ω–∞–ª –≤–æ–∑–º–æ–∂–µ–Ω)"
    else:
        rsi_status = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"

    return (f"üìä {symbol}\n"
            f"–¶–µ–Ω–∞: {price:.2f}$\n"
            f"RSI: {round(rsi,2)} ({rsi_status})\n"
            f"SMA50: {round(sma50,2)}, SMA200: {round(sma200,2)}\n"
            f"–¢—Ä–µ–Ω–¥: {trend}\n"
            f"–£—Ä–æ–≤–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ {round(support,2)}, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {round(resistance,2)}")

# === –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ===
def open_virtual_trade(symbol, direction, entry_price, strategy_source, timeframe, invest=INVEST_AMOUNT):
    sl_price = entry_price * (1 - SL_PCT) if direction == "LONG" else entry_price * (1 + SL_PCT)
    tp_price = entry_price * (1 + TP_PCT) if direction == "LONG" else entry_price * (1 - TP_PCT)
    trade = {
        "id": f"{symbol}-{timeframe}-{int(time.time())}",
        "symbol": symbol,
        "direction": direction,
        "entry_price": float(entry_price),
        "sl_price": float(sl_price),
        "tp_price": float(tp_price),
        "invest": invest,
        "leverage": LEVERAGE,
        "opened_at": pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S"),
        "strategy": strategy_source,
        "timeframe": timeframe,
        "status": "OPEN"
    }
    open_trades.append(trade)
    save_state()
    send_message(CHAT_ID, f"üíº –û–¢–ö–†–´–¢–ê –°–î–ï–õ–ö–ê:\n{symbol} {direction} {timeframe}\nentry={entry_price:.2f}, SL={sl_price:.2f}, TP={tp_price:.2f}")
    return trade

def close_virtual_trade(trade, exit_price, reason):
    trade["closed_at"] = pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")
    trade["exit_price"] = float(exit_price)
    trade["status"] = "CLOSED"
    pnl_p = pnl_percent(trade["entry_price"], exit_price, trade["direction"])
    trade["pnl_percent"] = round(pnl_p * 100, 4)
    trade["pnl_cash"] = round(cash_pnl(trade["invest"], trade["leverage"], pnl_p), 8)
    trade["close_reason"] = reason
    closed_trades.append(trade)
    open_trades[:] = [t for t in open_trades if t["id"] != trade["id"]]
    save_state()
    send_message(CHAT_ID, f"‚úÖ –ó–ê–ö–†–´–¢–ê –°–î–ï–õ–ö–ê: {trade['symbol']} {trade['direction']}\nPnL={trade['pnl_percent']}% ({trade['pnl_cash']}$)\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ===
def check_signals():
    for symbol in SYMBOLS:
        for tf in ACTIVE_TF:
            try:
                df = fetch_ohlcv(symbol, tf, 300)
                df = compute_indicators(df)
                if len(df) < 200: continue

                price = df["close"].iloc[-1]
                rsi = df["rsi"].iloc[-1]
                sma200 = df["sma200"].iloc[-1]

                direction = None
                reason = ""

                if rsi < 30 and price > sma200:
                    direction, reason = "LONG", "RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω + –≤—ã—à–µ SMA200"
                elif rsi > 70 and price < sma200:
                    direction, reason = "SHORT", "RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω + –Ω–∏–∂–µ SMA200"

                if direction:
                    trade_id = f"{symbol}-{tf}"
                    if any(t["id"].startswith(trade_id) for t in open_trades):
                        continue

                    signal_text = (f"‚ö° –°–∏–≥–Ω–∞–ª: {symbol} {tf} {direction}\n"
                                   f"{format_signal_text(symbol, df)}\n"
                                   f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                                   f"–°—É–º–º–∞: {INVEST_AMOUNT}$\n"
                                   f"–†–µ–∂–∏–º: {mode_status()}")
                    send_message(CHAT_ID, signal_text)

                    if TRADE_MODE == "virtual":
                        open_virtual_trade(symbol, direction, price, "signal", tf)
                    else:
                        send_message(CHAT_ID, f"üöÄ (–†–µ–∞–ª) {symbol} {direction}, {INVEST_AMOUNT}$ {tf}")
                        # –∑–¥–µ—Å—å –∫–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏ –Ω–∞ –±–∏—Ä–∂–µ

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol} {tf}: {e}")

# === –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫) ===
def auto_trading_loop():
    while True:
        try:
            check_signals()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞: {e}")
        time.sleep(60)

# === –§–æ—Ä–º–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
def format_settings():
    return (f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –¢–§: {', '.join(ACTIVE_TF)}\n"
            f"–†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: {INVEST_AMOUNT}$\n"
            f"–†–µ–∂–∏–º: {mode_status()}")

# === –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
def format_strategy():
    return ("üìñ –°—Ç—Ä–∞—Ç–µ–≥–∏—è:\n\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–µ–º RSI(14), SMA50, SMA200.\n"
            "2. –í—Ö–æ–¥ –≤ LONG:\n   - RSI < 30 (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)\n   - –¶–µ–Ω–∞ –≤—ã—à–µ SMA200 (—Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö)\n"
            "3. –í—Ö–æ–¥ –≤ SHORT:\n   - RSI > 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω)\n   - –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA200 (—Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑)\n"
            "4. Stop Loss = 2% –æ—Ç –≤—Ö–æ–¥–∞\n"
            "5. Take Profit = 4% –æ—Ç –≤—Ö–æ–¥–∞\n"
            "6. –ü–ª–µ—á–æ x10\n"
            "7. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö: 1m, 5m, 15m, 30m, 1h\n"
            "8. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª/—Ä–µ–∞–ª —á–µ—Ä–µ–∑ /mode")

# === –ö–æ–º–∞–Ω–¥—ã ===
def handle_command(command):
    global ACTIVE_TF, INVEST_AMOUNT, TRADE_MODE
    cmd = command.strip().split()
    if not cmd:
        return "‚ö†Ô∏è –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞."

    base = cmd[0].lower()

    if base == "/start":
        return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n" + format_settings()

    if base == "/help":
        return ("üìå –ö–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "/settings - —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
                "/strategy - –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
                "/mode virtual|real - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞\n"
                "/tfs - —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤\n"
                "/tf on X - –≤–∫–ª—é—á–∏—Ç—å –¢–§\n"
                "/tf off X - –≤—ã–∫–ª—é—á–∏—Ç—å –¢–§\n"
                "/amount N - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏\n"
                "/open - —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫\n"
                "/closed - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")

    if base == "/settings":
        return format_settings()

    if base == "/strategy":
        return format_strategy()

    if base == "/mode":
        if len(cmd) < 2:
            return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /mode virtual –∏–ª–∏ /mode real"
        if cmd[1] in ["virtual", "real"]:
            TRADE_MODE = cmd[1]
            save_settings()
            return f"üîÑ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω: {mode_status()}"
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /mode virtual –∏–ª–∏ /mode real"

    if base == "/tfs":
        return f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¢–§: {', '.join(ALL_TIMEFRAMES)}\n–ê–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(ACTIVE_TF)}"

    if base == "/tf":
        if len(cmd) < 3:
            return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /tf on X –∏–ª–∏ /tf off X"
        action, tf = cmd[1], cmd[2]
        if tf not in ALL_TIMEFRAMES:
            return f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –¢–§. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(ALL_TIMEFRAMES)}"
        if action == "on":
            if tf not in ACTIVE_TF:
                ACTIVE_TF.append(tf)
                save_settings()
            return f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º {tf} –≤–∫–ª—é—á—ë–Ω\n–ê–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(ACTIVE_TF)}"
        elif action == "off":
            if tf in ACTIVE_TF:
                ACTIVE_TF.remove(tf)
                save_settings()
            return f"‚ùå –¢–∞–π–º—Ñ—Ä–µ–π–º {tf} –≤—ã–∫–ª—é—á–µ–Ω\n–ê–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(ACTIVE_TF)}"
        return "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /tf on X –∏–ª–∏ /tf off X"

    if base == "/amount":
        if len(cmd) < 2:
            return "‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ, –ø—Ä–∏–º–µ—Ä: /amount 50"
        try:
            INVEST_AMOUNT = float(cmd[1])
            save_settings()
            return f"üí∞ –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –∏–∑–º–µ–Ω—ë–Ω: {INVEST_AMOUNT}$"
        except ValueError:
            return "‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ, –ø—Ä–∏–º–µ—Ä: /amount 50"

    if base == "/open":
        if not open_trades:
            return "üìÇ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫"
        msg = "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n"
        for t in open_trades:
            msg += f"- {t['symbol']} {t['direction']} {t['timeframe']} entry={t['entry_price']}$\n"
        return msg

    if base == "/closed":
        if not closed_trades:
            return "üìÇ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫"
        msg = "üìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n"
        for t in closed_trades[-10:]:
            msg += f"- {t['symbol']} {t['direction']} PnL={t['pnl_percent']}% ({t['pnl_cash']}$)\n"
        return msg

    return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. /help"

@app.route("/", methods=["POST", "GET"])
def webhook():
    if request.method == "POST":
        update = request.json
        if "message" in update and "text" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            reply = handle_command(update["message"]["text"].strip())
            send_message(chat_id, reply)
        return {"ok": True}
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    t = Thread(target=auto_trading_loop, daemon=True)
    t.start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
